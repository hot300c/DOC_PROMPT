#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ ki·ªÉm tra danh s√°ch stored procedures v√† so s√°nh v·ªõi handlers hi·ªán c√≥
"""

import os
import re
from pathlib import Path

def extract_stored_procedures_from_file(file_path):
    """ƒê·ªçc file README_LISTSP.md v√† tr√≠ch xu·∫•t danh s√°ch stored procedures"""
    stored_procedures = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            # T√°ch t·ª´ng d√≤ng v√† l·ªçc c√°c stored procedures
            lines = content.strip().split('\n')
            for line in lines:
                line = line.strip()
                if line and not line.startswith('#'):
                    stored_procedures.append(line)
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file {file_path}: {e}")
    
    return stored_procedures

def find_handlers_in_directory(directory):
    """T√¨m t·∫•t c·∫£ c√°c file handler trong th∆∞ m·ª•c"""
    handlers = []
    
    try:
        for root, dirs, files in os.walk(directory):
            for file in files:
                if file.endswith('.cs'):
                    file_path = os.path.join(root, file)
                    # ƒê·ªçc n·ªôi dung file ƒë·ªÉ t√¨m t√™n stored procedure
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            # T√¨m t√™n stored procedure trong file
                            # Th∆∞·ªùng c√≥ d·∫°ng: "ws_ProcedureName" ho·∫∑c t∆∞∆°ng t·ª±
                            matches = re.findall(r'ws_[A-Za-z0-9_]+', content)
                            if matches:
                                handlers.extend(matches)
                    except Exception as e:
                        print(f"L·ªói khi ƒë·ªçc file {file_path}: {e}")
    except Exception as e:
        print(f"L·ªói khi qu√©t th∆∞ m·ª•c {directory}: {e}")
    
    return list(set(handlers))  # Lo·∫°i b·ªè tr√πng l·∫∑p

def compare_stored_procedures_with_handlers(stored_procedures, handlers):
    """So s√°nh danh s√°ch stored procedures v·ªõi handlers"""
    # Chuy·ªÉn ƒë·ªïi th√†nh set ƒë·ªÉ d·ªÖ so s√°nh
    sp_set = set(stored_procedures)
    handler_set = set(handlers)
    
    # T√¨m c√°c stored procedures c√≥ handler
    have_handlers = sp_set.intersection(handler_set)
    
    # T√¨m c√°c stored procedures ch∆∞a c√≥ handler
    missing_handlers = sp_set - handler_set
    
    # T√¨m c√°c handlers kh√¥ng c√≥ trong danh s√°ch stored procedures
    extra_handlers = handler_set - sp_set
    
    return {
        'have_handlers': sorted(list(have_handlers)),
        'missing_handlers': sorted(list(missing_handlers)),
        'extra_handlers': sorted(list(extra_handlers))
    }

def main():
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file README_LISTSP.md
    sp_file = "DOCS/README_LISTSP.md"
    
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c handlers
    handlers_dir = "WebService.Handlers"
    
    print("=== KI·ªÇM TRA STORED PROCEDURES V√Ä HANDLERS ===\n")
    
    # ƒê·ªçc danh s√°ch stored procedures
    print("ƒêang ƒë·ªçc danh s√°ch stored procedures...")
    stored_procedures = extract_stored_procedures_from_file(sp_file)
    print(f"T√¨m th·∫•y {len(stored_procedures)} stored procedures\n")
    
    # T√¨m c√°c handlers
    print("ƒêang t√¨m c√°c handlers...")
    handlers = find_handlers_in_directory(handlers_dir)
    print(f"T√¨m th·∫•y {len(handlers)} handlers\n")
    
    # So s√°nh
    print("ƒêang so s√°nh...")
    result = compare_stored_procedures_with_handlers(stored_procedures, handlers)
    
    # In k·∫øt qu·∫£
    print("=== K·∫æT QU·∫¢ ===\n")
    
    print(f"üìä T·ªîNG QUAN:")
    print(f"   - T·ªïng s·ªë stored procedures: {len(stored_procedures)}")
    print(f"   - T·ªïng s·ªë handlers: {len(handlers)}")
    print(f"   - Stored procedures c√≥ handler: {len(result['have_handlers'])}")
    print(f"   - Stored procedures ch∆∞a c√≥ handler: {len(result['missing_handlers'])}")
    print(f"   - Handlers kh√¥ng c√≥ trong danh s√°ch SP: {len(result['extra_handlers'])}\n")
    
    print(f"‚úÖ STORED PROCEDURES C√ì HANDLER ({len(result['have_handlers'])}):")
    for sp in result['have_handlers'][:20]:  # Ch·ªâ hi·ªÉn th·ªã 20 ƒë·∫ßu ti√™n
        print(f"   ‚úì {sp}")
    if len(result['have_handlers']) > 20:
        print(f"   ... v√† {len(result['have_handlers']) - 20} stored procedures kh√°c\n")
    else:
        print()
    
    print(f"‚ùå STORED PROCEDURES CH∆ØA C√ì HANDLER ({len(result['missing_handlers'])}):")
    for sp in result['missing_handlers'][:20]:  # Ch·ªâ hi·ªÉn th·ªã 20 ƒë·∫ßu ti√™n
        print(f"   ‚úó {sp}")
    if len(result['missing_handlers']) > 20:
        print(f"   ... v√† {len(result['missing_handlers']) - 20} stored procedures kh√°c\n")
    else:
        print()
    
    print(f"‚ö†Ô∏è  HANDLERS KH√îNG C√ì TRONG DANH S√ÅCH SP ({len(result['extra_handlers'])}):")
    for handler in result['extra_handlers'][:20]:  # Ch·ªâ hi·ªÉn th·ªã 20 ƒë·∫ßu ti√™n
        print(f"   ? {handler}")
    if len(result['extra_handlers']) > 20:
        print(f"   ... v√† {len(result['extra_handlers']) - 20} handlers kh√°c\n")
    else:
        print()
    
    # L∆∞u k·∫øt qu·∫£ chi ti·∫øt v√†o file
    output_file = "handler_analysis_result.txt"
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("=== PH√ÇN T√çCH STORED PROCEDURES V√Ä HANDLERS ===\n\n")
        f.write(f"T·ªïng s·ªë stored procedures: {len(stored_procedures)}\n")
        f.write(f"T·ªïng s·ªë handlers: {len(handlers)}\n")
        f.write(f"Stored procedures c√≥ handler: {len(result['have_handlers'])}\n")
        f.write(f"Stored procedures ch∆∞a c√≥ handler: {len(result['missing_handlers'])}\n")
        f.write(f"Handlers kh√¥ng c√≥ trong danh s√°ch SP: {len(result['extra_handlers'])}\n\n")
        
        f.write("=== STORED PROCEDURES C√ì HANDLER ===\n")
        for sp in result['have_handlers']:
            f.write(f"‚úì {sp}\n")
        f.write("\n")
        
        f.write("=== STORED PROCEDURES CH∆ØA C√ì HANDLER ===\n")
        for sp in result['missing_handlers']:
            f.write(f"‚úó {sp}\n")
        f.write("\n")
        
        f.write("=== HANDLERS KH√îNG C√ì TRONG DANH S√ÅCH SP ===\n")
        for handler in result['extra_handlers']:
            f.write(f"? {handler}\n")
    
    print(f"üìÑ K·∫øt qu·∫£ chi ti·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: {output_file}")

if __name__ == "__main__":
    main()
