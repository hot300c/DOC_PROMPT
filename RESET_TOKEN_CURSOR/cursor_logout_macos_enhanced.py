#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cursor AI Logout Tool - Enhanced macOS Version
Script t·ªëi ∆∞u h√≥a ƒë·∫∑c bi·ªát cho macOS ƒë·ªÉ logout kh·ªèi Cursor AI
"""

import os
import sys
import shutil
import subprocess
import platform
import time
from pathlib import Path


def print_colored(text: str, color: str = "white") -> None:
    """Print colored text to console v·ªõi h·ªó tr·ª£ macOS terminal."""
    colors = {
        "cyan": "\033[96m", "yellow": "\033[93m", "green": "\033[92m",
        "red": "\033[91m", "white": "\033[97m", "gray": "\033[90m",
        "blue": "\033[94m", "magenta": "\033[95m"
    }
    reset = "\033[0m"
    color_code = colors.get(color, colors["white"])
    print(f"{color_code}{text}{reset}")


def check_macos() -> bool:
    """Ki·ªÉm tra xem c√≥ ƒëang ch·∫°y tr√™n macOS kh√¥ng."""
    if platform.system() != "Darwin":
        print_colored("‚ùå Script n√†y ch·ªâ d√†nh cho macOS!", "red")
        return False
    return True


def get_cursor_processes():
    """L·∫•y t·∫•t c·∫£ process Cursor tr√™n macOS."""
    try:
        result = subprocess.run(["ps", "-axo", "pid,comm,args"], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            return []
        
        processes = []
        for line in result.stdout.strip().split('\n')[1:]:
            if line.strip():
                parts = line.split(None, 2)
                if len(parts) >= 3:
                    pid, comm, args = parts[0], parts[1], parts[2]
                    if "Cursor" in comm or "Cursor" in args:
                        processes.append((pid, f"{comm} {args}"))
        return processes
    except Exception as e:
        print_colored(f"‚ùå L·ªói khi l·∫•y danh s√°ch process: {e}", "red")
        return []


def force_kill_cursor() -> bool:
    """Force kill t·∫•t c·∫£ process Cursor AI tr√™n macOS."""
    if not check_macos():
        return False
    
    try:
        print_colored("üîÑ ƒêang ƒë√≥ng Cursor AI...", "yellow")
        processes = get_cursor_processes()
        
        if not processes:
            print_colored("‚úÖ Kh√¥ng c√≥ process Cursor n√†o ƒëang ch·∫°y.", "green")
            return True
        
        print_colored(f"üìã T√¨m th·∫•y {len(processes)} process Cursor:", "cyan")
        for pid, process_info in processes:
            print_colored(f"  PID {pid}: {process_info}", "gray")
        
        # G·ª≠i SIGTERM tr∆∞·ªõc
        for pid, process_info in processes:
            try:
                subprocess.run(["kill", pid], check=True)
                print_colored(f"  ‚úì ƒê√£ g·ª≠i SIGTERM ƒë·∫øn PID {pid}", "blue")
            except subprocess.CalledProcessError:
                print_colored(f"  ‚ö†Ô∏è  Kh√¥ng th·ªÉ g·ª≠i SIGTERM ƒë·∫øn PID {pid}", "yellow")
        
        time.sleep(3)
        
        # Force kill n·∫øu c·∫ßn
        remaining_processes = get_cursor_processes()
        if remaining_processes:
            print_colored("üîÑ M·ªôt s·ªë process v·∫´n c√≤n ch·∫°y, ƒëang force kill...", "yellow")
            for pid, process_info in remaining_processes:
                try:
                    subprocess.run(["kill", "-9", pid], check=True)
                    print_colored(f"  ‚úì ƒê√£ force kill PID {pid}", "red")
                except subprocess.CalledProcessError:
                    print_colored(f"  ‚ö†Ô∏è  Kh√¥ng th·ªÉ force kill PID {pid}", "yellow")
        
        time.sleep(2)
        final_check = get_cursor_processes()
        if not final_check:
            print_colored("‚úÖ T·∫•t c·∫£ process Cursor AI ƒë√£ ƒë∆∞·ª£c ƒë√≥ng th√†nh c√¥ng!", "green")
            return True
        else:
            print_colored(f"‚ö†Ô∏è  C·∫£nh b√°o: {len(final_check)} process v·∫´n c√≤n ch·∫°y", "yellow")
            return True
            
    except Exception as e:
        print_colored(f"‚ùå L·ªói khi ƒë√≥ng Cursor AI: {e}", "red")
        return False


def get_cursor_cache_path():
    """L·∫•y ƒë∆∞·ªùng d·∫´n cache c·ªßa Cursor AI tr√™n macOS."""
    if not check_macos():
        return None
    return Path.home() / "Library" / "Application Support" / "Cursor"


def get_cursor_user_path():
    """L·∫•y ƒë∆∞·ªùng d·∫´n User data c·ªßa Cursor AI tr√™n macOS."""
    if not check_macos():
        return None
    return Path.home() / "Library" / "Application Support" / "Cursor" / "User"


def clear_cursor_cache() -> bool:
    """X√≥a cache c·ªßa Cursor AI tr√™n macOS."""
    cache_path = get_cursor_cache_path()
    if not cache_path or not cache_path.exists():
        print_colored("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c cache", "yellow")
        return False
    
    try:
        print_colored("üîÑ ƒêang x√≥a cache Cursor AI...", "yellow")
        
        cache_dirs = ["Cache", "Code Cache", "GPUCache", "Service Worker", 
                     "Session Storage", "Local Storage", "IndexedDB", "Databases"]
        cache_files = ["Cookies", "Cookies-journal", "Preferences", 
                      "Secure Preferences", "Local State", "Network Persistent State"]
        
        deleted_count = 0
        
        for dir_name in cache_dirs:
            dir_path = cache_path / dir_name
            if dir_path.exists():
                try:
                    shutil.rmtree(dir_path)
                    print_colored(f"  ‚úì ƒê√£ x√≥a: {dir_name}", "green")
                    deleted_count += 1
                except Exception as e:
                    print_colored(f"  ‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a {dir_name}: {e}", "yellow")
        
        for file_name in cache_files:
            file_path = cache_path / file_name
            if file_path.exists():
                try:
                    file_path.unlink()
                    print_colored(f"  ‚úì ƒê√£ x√≥a: {file_name}", "green")
                    deleted_count += 1
                except Exception as e:
                    print_colored(f"  ‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a {file_name}: {e}", "yellow")
        
        if deleted_count > 0:
            print_colored(f"‚úÖ ƒê√£ x√≥a {deleted_count} file/th∆∞ m·ª•c cache th√†nh c√¥ng!", "green")
        else:
            print_colored("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file cache ƒë·ªÉ x√≥a.", "yellow")
        
        return True
        
    except Exception as e:
        print_colored(f"‚ùå L·ªói khi x√≥a cache: {e}", "red")
        return False


def logout_cursor() -> bool:
    """Logout kh·ªèi Cursor AI tr√™n macOS."""
    cache_path = get_cursor_cache_path()
    if not cache_path:
        return False
    
    try:
        print_colored("üîÑ ƒêang logout kh·ªèi Cursor AI...", "yellow")
        
        login_files = [
            "User Data/Default/Login Data", "User Data/Default/Web Data",
            "User Data/Default/Network Persistent State", "User Data/Default/History",
            "User Data/Default/Cookies", "User Data/Default/Bookmarks",
            "User Data/Default/Last Session", "User Data/Default/Current Session"
        ]
        
        login_dirs = [
            "User Data/Default/Session Storage", "User Data/Default/Local Storage",
            "User Data/Default/IndexedDB", "User Data/Default/Databases"
        ]
        
        deleted_count = 0
        
        for file_name in login_files:
            file_path = cache_path / file_name
            if file_path.exists():
                try:
                    file_path.unlink()
                    print_colored(f"  ‚úì ƒê√£ x√≥a: {file_name}", "green")
                    deleted_count += 1
                except Exception as e:
                    print_colored(f"  ‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a {file_name}: {e}", "yellow")
        
        for dir_name in login_dirs:
            dir_path = cache_path / dir_name
            if dir_path.exists():
                try:
                    shutil.rmtree(dir_path)
                    print_colored(f"  ‚úì ƒê√£ x√≥a th∆∞ m·ª•c: {dir_name}", "green")
                    deleted_count += 1
                except Exception as e:
                    print_colored(f"  ‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c {dir_name}: {e}", "yellow")
        
        if deleted_count > 0:
            print_colored(f"‚úÖ ƒê√£ logout th√†nh c√¥ng! ƒê√£ x√≥a {deleted_count} file/th∆∞ m·ª•c.", "green")
        else:
            print_colored("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file th√¥ng tin ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a.", "yellow")
        
        return True
        
    except Exception as e:
        print_colored(f"‚ùå L·ªói khi logout: {e}", "red")
        return False


def reset_machine_id() -> bool:
    """Reset Machine ID c·ªßa Cursor AI s·ª≠ d·ª•ng cursor-free-vip tr√™n macOS."""
    if not check_macos():
        return False
    
    try:
        print_colored("üîÑ ƒêang reset Machine ID s·ª≠ d·ª•ng cursor-free-vip...", "yellow")
        
        curl_cmd = "curl -fsSL https://raw.githubusercontent.com/yeongpin/cursor-free-vip/main/scripts/install.sh -o install.sh && chmod +x install.sh && ./install.sh"
        
        print_colored("üöÄ M·ªü Terminal v√† ch·∫°y l·ªánh:", "cyan")
        print_colored(f"   {curl_cmd}", "white")
        print_colored("\n‚ö†Ô∏è  L∆∞u √Ω: Script s·∫Ω t·ª± ƒë·ªông reset Machine ID v√† t·∫°o t√†i kho·∫£n m·ªõi.", "yellow")
        
        # M·ªü Terminal
        subprocess.run(["open", "-a", "Terminal"], check=True)
        time.sleep(2)
        
        # Ch·∫°y l·ªánh trong Terminal
        osascript_cmd = f'osascript -e \'tell application "Terminal" to do script "{curl_cmd}"\''
        result = subprocess.run(osascript_cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print_colored("‚úÖ ƒê√£ m·ªü Terminal v√† ch·∫°y script cursor-free-vip!", "green")
        else:
            print_colored("‚ö†Ô∏è  C√≥ th·ªÉ c√≥ l·ªói khi ch·∫°y script", "yellow")
            print_colored("üí° Copy v√† paste l·ªánh n√†y v√†o Terminal:", "cyan")
            print_colored(f"   {curl_cmd}", "white")
        
        return True
            
    except Exception as e:
        print_colored(f"‚ùå L·ªói khi ch·∫°y script cursor-free-vip: {e}", "red")
        return False


def open_default_browser() -> bool:
    """M·ªü tr√¨nh duy·ªát m·∫∑c ƒë·ªãnh tr√™n macOS."""
    if not check_macos():
        return False
    
    cursor_dashboard_url = "https://cursor.com/dashboard?tab=settings"
    
    try:
        print_colored("üåê ƒêang m·ªü tr√¨nh duy·ªát m·∫∑c ƒë·ªãnh...", "blue")
        subprocess.run(["open", cursor_dashboard_url], check=True)
        print_colored("‚úÖ ƒê√£ m·ªü tr√¨nh duy·ªát ƒë·ªÉ truy c·∫≠p Cursor Dashboard Settings", "green")
        return True
            
    except Exception as e:
        print_colored(f"‚ùå L·ªói khi m·ªü tr√¨nh duy·ªát: {e}", "red")
        print_colored(f"üí° Vui l√≤ng m·ªü tr√¨nh duy·ªát v√† truy c·∫≠p: {cursor_dashboard_url}", "cyan")
        return False


def show_menu():
    """Hi·ªÉn th·ªã menu t√πy ch·ªçn cho macOS."""
    print("\n" + "="*60)
    print_colored("üöÄ CURSOR AI LOGOUT TOOL - macOS Enhanced", "cyan")
    print_colored("="*60, "cyan")
    print_colored("Ch·ªçn t√πy ch·ªçn:", "white")
    print_colored("1. üîÑ Reset Machine ID (cursor-free-vip)", "yellow")
    print_colored("2. üì§ Logout account v√† x√≥a cache", "blue")
    print_colored("3. üíÄ Force kill Cursor AI", "red")
    print_colored("4. üî• RESET HO√ÄN TO√ÄN", "magenta")
    print_colored("5. üåê M·ªü tr√¨nh duy·ªát Dashboard Settings", "cyan")
    print_colored("6. üö™ Tho√°t", "white")
    print_colored("="*60, "cyan")


def main():
    """H√†m ch√≠nh cho macOS Cursor logout tool."""
    if not check_macos():
        return
    
    print_colored("=== CURSOR AI LOGOUT TOOL - macOS Enhanced ===", "cyan")
    print_colored("Script t·ªëi ∆∞u h√≥a ƒë·∫∑c bi·ªát cho macOS", "white")
    print()
    
    while True:
        show_menu()
        
        try:
            choice = input("\nNh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1-6): ").strip()
            
            if choice == "1":
                print("\nüîÑ ƒêang reset Machine ID...")
                reset_machine_id()
                    
            elif choice == "2":
                print("\nüîÑ ƒêang logout v√† x√≥a cache...")
                logout_cursor()
                clear_cursor_cache()
                print_colored("‚úÖ Ho√†n th√†nh! Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i Cursor AI.", "green")
                    
            elif choice == "3":
                print("\nüîÑ ƒêang force kill Cursor AI...")
                force_kill_cursor()
                    
            elif choice == "4":
                print("\nüîÑ B·∫Øt ƒë·∫ßu reset ho√†n to√†n...")
                force_kill_cursor()
                reset_machine_id()
                open_default_browser()
                print_colored("üéâ RESET HO√ÄN TO√ÄN TH√ÄNH C√îNG!", "green")
                    
            elif choice == "5":
                print("\nüåê ƒêang m·ªü tr√¨nh duy·ªát...")
                open_default_browser()
                    
            elif choice == "6":
                print_colored("\nüëã T·∫°m bi·ªát!", "cyan")
                break
                
            else:
                print_colored("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1-6.", "red")
                
        except KeyboardInterrupt:
            print_colored("\n\nüëã ƒê√£ h·ªßy thao t√°c. T·∫°m bi·ªát!", "yellow")
            break
        except Exception as e:
            print_colored(f"\n‚ùå C√≥ l·ªói x·∫£y ra: {e}", "red")
        
        if choice in ["1", "2", "3", "4", "5"]:
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


if __name__ == "__main__":
    main()
