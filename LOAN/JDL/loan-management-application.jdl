// =============================
// APPLICATION 1: NOTIFICATION SERVICE (Microservice)
// =============================
application {
  config {
    baseName notificationService
    applicationType microservice
    authenticationType jwt
    packageName com.pntsol.notification
    prodDatabaseType mysql
    devDatabaseType mysql
    databaseType sql
    buildTool maven
    serverPort 8083
    enableHibernateCache true
    dtoSuffix DTO
    jhiPrefix pnt
    languages [en]
    enableSwaggerCodegen true
    skipClient true
    skipServer false
    skipUserManagement true
    serviceDiscoveryType consul
  }
  entities NotificationCampaign, NotificationContent, NotificationBatch, NotificationDelivery, NotificationContentVariant, ReminderConfig, ReminderHistory, ApiAuditLog
}

// =============================
// APPLICATION 2: LOAN MANAGEMENT SERVICE (Microservice)
// =============================
application {
  config {
    baseName loanManagementService
    applicationType microservice
    authenticationType jwt
    packageName com.pntsol.loan
    prodDatabaseType mysql
    devDatabaseType mysql
    databaseType sql
    buildTool maven
    serverPort 8082
    enableHibernateCache true
    dtoSuffix DTO
    jhiPrefix pnt
    languages [en]
    enableSwaggerCodegen true
    skipClient true
    skipServer false
    skipUserManagement true
    serviceDiscoveryType consul
  }
  entities CustomerProfile, DeviceToken, Broker, LeadApplication, LeadOwner, LeadOwnerEmployment, LeadOwnerIncome, LeadOwnerAddress, LeadAssetFinance, LeadMarketing, LeadNote, CommercialProfile, LeadStatusHistory, LeadRevision, LoanApplication, RepaymentSchedule, Payment, Industry, LoanPurpose, LoanTerm, OwnerType, HomeOwnerOption, ProductType, EquipmentType, Occupation, EmploymentType
}

// =============================
// APPLICATION 3: GATEWAY (Monolith with NextJS Frontend)
// =============================
application {
  config {
    baseName loanGateway
    applicationType gateway
    authenticationType jwt
    packageName com.pntsol.gateway
    prodDatabaseType mysql
    devDatabaseType mysql
    databaseType sql
    buildTool maven
    serverPort 8080
    enableHibernateCache true
    dtoSuffix DTO
    jhiPrefix pnt
    languages [en]
    enableSwaggerCodegen true
    skipClient false
    skipServer false
    skipUserManagement false
    clientFramework react
    serviceDiscoveryType consul
  }
  entities *
}

enum NotificationChannel { EMAIL, PUSH, IN_APP }

enum SendStatus { PENDING, SUCCESS, FAILED }

enum Platform { ANDROID, IOS, WEB }

enum AudienceType { REGISTERED, UNREGISTERED }
 
// Rendering strategy for notification content
enum RenderingStrategy { STATIC, PER_RECIPIENT }

// LeadApplication management enums
enum LeadType { CONSUMER, COMMERCIAL }
enum GenderType { MALE, FEMALE }
enum MaritalStatusType { SINGLE, MARRIED, DE_FACTO }
enum LeadStatus { NEW, IN_PROGRESS, PENDING_INFO, SUBMITTED, APPROVED, DECLINED, WITHDRAWN }

// LoanApplication management enums
enum LoanStatus { PENDING, APPROVED, ACTIVE, PAID_OFF, DEFAULTED, CANCELLED }
enum PaymentStatus { PENDING, PAID, OVERDUE, PARTIAL }
enum PaymentMethod { BANK_TRANSFER, CASH, CHEQUE, CARD }
enum LoanType { PERSONAL, BUSINESS, MORTGAGE, AUTO, EQUIPMENT }
enum InterestType { FIXED, VARIABLE }

entity CustomerProfile {
  fullName String required,
  phone String,
  loanCode String unique,
  googleSubject String,
  googleAccount Boolean required,
  registeredAt Instant
}

entity Broker {
  brokerCode String required unique,
  fullName String required,
  email String required,
  phone String,
  licenseNumber String,
  active Boolean required,
  createdAt Instant required,
  updatedAt Instant,
  updatedBy String maxlength(100)
}

entity DeviceToken {
  deviceToken String required,
  platform Platform required,
  email String,
  username String,
  loanCode String,
  lastSeen Instant
}

entity NotificationCampaign {
  name String required unique,
  active Boolean required,
  audience AudienceType required,
  channelActiveEmail Boolean required,
  channelActivePush Boolean required,
  channelActiveInApp Boolean required,
  // Email content
  emailSubject String,
  emailBody TextBlob,
  // Push content
  pushTitle String,
  pushBody TextBlob,
  // In-app content
  inAppTitle String,
  inAppBody TextBlob,
  imageUrl String
}

// NotificationHistory consolidated into NotificationDelivery (no entity)

// Deduplication-friendly notification model
entity NotificationContent {
  channel NotificationChannel required,
  subject String,
  body TextBlob required,
  inAppShortTitle String,
  inAppShortBody TextBlob,
  inAppLongTitle String,
  inAppLongBody TextBlob,
  inAppImageUrl String,
  inAppRichStyleJson TextBlob,
  renderingStrategy RenderingStrategy required,
  paramSchemaJson TextBlob,
  contentHash String required unique maxlength(128),
  createdAt Instant required
}

entity NotificationBatch {
  // groups a send for a campaign using a specific content
  name String maxlength(120),
  plannedAt Instant,
  sentAt Instant,
  status SendStatus,
  totalRecipients Integer,
  successCount Integer,
  failureCount Integer
}

// Optional: group repeated rendered outputs for personalized templates
entity NotificationContentVariant {
  variantHash String required unique maxlength(128),
  subject String,
  body TextBlob,
  createdAt Instant required
}

entity NotificationDelivery {
  sentAt Instant,
  status SendStatus required,
  error TextBlob,
  recipientEmail String,
  recipientUsername String,
  recipientLoanCode String,
  parametersJson TextBlob
}

entity ReminderConfig {
  enabled Boolean required,
  runAt String required,
  daysBeforeDue Integer required min(1),
  maxReminders Integer required min(1)
}

entity ReminderHistory {
  plannedAt Instant required,
  sentAt Instant,
  channel NotificationChannel required,
  status SendStatus required,
  loanCode String required,
  customerId Long,
  templateSnapshot TextBlob
}

// Core LoanApplication Management Entities
entity LoanApplication {
  loanNumber String unique,
  leadApplicationId Long,
  customerId Long,
  brokerId Long,
  amount BigDecimal,
  interestRate BigDecimal,
  termMonths Integer,
  status LoanStatus,
  loanType LoanType,
  interestType InterestType,
  approvedAt Instant,
  disbursedAt Instant,
  maturityDate LocalDate,
  // Snapshot of LeadApplication data at loan creation time
  leadSnapshotJson TextBlob,
  // Key fields for easy querying (denormalized from snapshot)
  customerName String,
  customerEmail String,
  customerPhone String,
  brokerName String,
  leadType LeadType,
  purpose String,
  createdAt Instant,
  updatedAt Instant,
  updatedBy String maxlength(100)
}


entity RepaymentSchedule {
  loanApplicationId Long,
  installmentNumber Integer,
  dueDate LocalDate,
  principalAmount BigDecimal,
  interestAmount BigDecimal,
  totalAmount BigDecimal,
  status PaymentStatus,
  paidAt Instant,
  paidAmount BigDecimal,
  lateFee BigDecimal,
  createdAt Instant,
  updatedAt Instant
}

entity Payment {
  paymentNumber String unique,
  loanApplicationId Long,
  amount BigDecimal,
  paymentDate Instant,
  paymentMethod PaymentMethod,
  reference String,
  status PaymentStatus,
  notes TextBlob,
  createdAt Instant,
  updatedAt Instant,
  updatedBy String maxlength(100)
}

// Removed relation to built-in User to simplify import; can be wired post-generation

relationship OneToMany {
  CustomerProfile{deviceTokens} to DeviceToken{customerProfile},
  CustomerProfile{loanApplications} to LoanApplication{customer},
  Broker{loanApplications} to LoanApplication{broker},
  Broker{leadApplications} to LeadApplication{broker},
  LoanApplication{repaymentSchedules} to RepaymentSchedule{loanApplication},
  LoanApplication{payments} to Payment{loanApplication},
  NotificationCampaign{batches} to NotificationBatch{campaign},
  NotificationBatch{deliveries} to NotificationDelivery{batch}
}

relationship ManyToOne {
  ReminderHistory to NotificationCampaign,
  NotificationBatch to NotificationCampaign,
  NotificationBatch to NotificationContent,
  NotificationContentVariant to NotificationContent,
  NotificationDelivery to NotificationBatch
}

// Note: NotificationDelivery relationships removed as they cross application boundaries
// These will be handled via API calls between services

paginate NotificationCampaign, DeviceToken, CustomerProfile, ReminderHistory with pagination

paginate NotificationContent, NotificationContentVariant, NotificationBatch, NotificationDelivery with pagination

paginate Broker, LoanApplication, RepaymentSchedule, Payment with pagination

service all with serviceClass

dto all with mapstruct

dto NotificationContent, NotificationContentVariant, NotificationBatch, NotificationDelivery with mapstruct

dto Broker, LoanApplication, RepaymentSchedule, Payment with mapstruct

// Constraints and validations derived from business rules
// - Email must be unique when used as login (handled by built-in User)
// - DeviceToken may include email-username-loanCode to indicate registered users
// - Campaigns can target REGISTERED or UNREGISTERED audiences
//
// Business Workflow:
// 1. LeadApplication: Customer submits inquiry (NEW → IN_PROGRESS → PENDING_INFO → SUBMITTED → APPROVED DECLINED WITHDRAWN)
// 2. LoanApplication: When LeadApplication status = APPROVED, create LoanApplication entity with:
//    - Snapshot of complete LeadApplication data (leadSnapshotJson)
//    - Denormalized key fields for querying (customerName, brokerName, etc.)
//    - Loan-specific contract details (amount, interestRate, termMonths, etc.)
// 3. LoanApplication: PENDING → APPROVED → ACTIVE → PAID_OFF DEFAULTED CANCELLED
// 4. RepaymentSchedule: Generated when LoanApplication becomes ACTIVE
// 5. Payment: Records actual payments against RepaymentSchedule
//
// Data Optimization Strategy:
// - leadSnapshotJson: Complete JSON snapshot of LeadApplication + all related entities at loan creation
// - Denormalized fields: Key fields extracted for easy querying and reporting
// - Benefits: Data integrity + Query performance + No redundancy
// - Flexible constraints: Removed required constraints for better user experience
//
// =============================
// LeadApplication Management (Consumer & Commercial)
// Consumer URL: https://broker-api-docs.lend.com.au/api/submit-new-consumer-lead
// Commercial URL: https://broker-api-docs.lend.com.au/api/submit-new-commercial-lead

entity LeadApplication {
  // 7-char unique ref returned by Lend
  ref String unique maxlength(7),
  leadType LeadType required,
  sendEmailToClient Boolean,
  amountRequested BigDecimal required min(1),
  loanTermRequested Integer,
  purposeId Integer,
  productTypeId Integer,
  industryId Integer,
  notes TextBlob,
  // status tracking
  status LeadStatus required,
  statusReason String maxlength(255),
  statusUpdatedAt Instant,
  statusUpdatedBy String maxlength(100),
  // generic auditing
  createdAt Instant required,
  updatedAt Instant,
  updatedBy String maxlength(100)
}

entity LeadOwner {
  // Mr, Mrs, Miss, Ms
  title String maxlength(10),
  firstName String required maxlength(60),
  middleName String maxlength(50),
  lastName String required maxlength(60),
  // AU mobile without country code
  contactNumber String required maxlength(10),
  email String required maxlength(254),
  dob LocalDate,
  gender GenderType,
  maritalStatus MaritalStatusType,
  // picklist homeowner id
  homeOwnerOptionId Integer,
  drivingLicenceNum String maxlength(30),
  drivingLicenceExpiry LocalDate,
  drivingLicenceState String maxlength(10),
  drivingLicenceType String maxlength(20),
  medicareNumber String maxlength(20),
  medicareRef String maxlength(5),
  medicareCardColour String maxlength(10),
  // API uses mm-yy format; store as string
  medicareExpiry String maxlength(10),
  passportNumber String maxlength(30),
  passportCountry String maxlength(60),
  passportExpiry LocalDate,
  creditHistory String maxlength(30),
  consentDate LocalDate,
  numberOfDependants Integer,
  dependantDetails String maxlength(200),
  residencyStatus String maxlength(30)
}

entity LeadOwnerEmployment {
  // picklist occupation id
  occupationId Integer,
  employer String maxlength(120),
  // picklist employment type value
  employmentType String maxlength(40),
  dateFrom LocalDate,
  dateTo LocalDate
}

entity LeadOwnerIncome {
  configIncomeId Integer,
  amount BigDecimal required min(0),
  note String maxlength(255)
}

entity LeadOwnerAddress {
  livingStatus String maxlength(30),
  livingStatusOther String maxlength(60),
  landlordName String maxlength(120),
  landlordContactNumber String maxlength(20),
  address String maxlength(200),
  suburb String maxlength(80),
  state String maxlength(10),
  postcode Integer,
  country String maxlength(2),
  dateFrom LocalDate,
  dateTo LocalDate
}

entity LeadAssetFinance {
  equipmentId Integer,
  saleType String,
  isVehicleFound Boolean,
  condition String maxlength(20),
  year String maxlength(4),
  make String maxlength(60),
  model String maxlength(80),
  variant String maxlength(120),
  engineTransmission String maxlength(60),
  transmission String maxlength(20),
  numCyl Integer,
  engine String maxlength(60),
  vin String maxlength(30),
  rego String maxlength(10),
  regoState String maxlength(10),
  odometer Integer,
  colour String maxlength(30),
  assetPurchasePrice BigDecimal,
  assetDeposit BigDecimal,
  assetTradeinValue BigDecimal,
  outstandingLoan BigDecimal,
  insuranceAddon BigDecimal,
  otherAddons BigDecimal,
  assetBalloon Integer,
  balloonPercentOrValue String maxlength(10),
  balloonReason String maxlength(60),
  balloonReasonExplanation String maxlength(255),
  balloonPayMethod String maxlength(30),
  financeAmount BigDecimal,
  manualValuation BigDecimal,
  ltv Integer,
  supplier String maxlength(120),
  supplierEmail String maxlength(254),
  supplierContactName String maxlength(120),
  supplierContactNumber String maxlength(20),
  supplierQuoteRef String maxlength(60)
}

entity LeadMarketing {
  gaClientId String maxlength(60),
  gclid String maxlength(100),
  utmSource String maxlength(60),
  utmMedium String maxlength(60),
  utmCampaign String maxlength(120),
  utmTerm String maxlength(120),
  utmContent String maxlength(120)
}

entity LeadNote {
  notes TextBlob required
}

entity CommercialProfile {
  legalName String required maxlength(160),
  tradingName String maxlength(160),
  abn String maxlength(20),
  acn String maxlength(20),
  gstRegistered Boolean,
  yearsTrading Integer,
  numEmployees Integer,
  monthlyTurnover BigDecimal,
  monthlyExpenses BigDecimal,
  entityType String maxlength(40),
  businessPhone String maxlength(20),
  businessEmail String maxlength(254),
  website String maxlength(200)
}

relationship OneToOne {
  LeadApplication to LeadOwner,
  LeadApplication to LeadAssetFinance,
  LeadApplication to LeadMarketing,
  LeadApplication to CommercialProfile
}

relationship OneToMany {
  LeadApplication to LoanApplication
}

relationship OneToMany {
  LeadApplication to LeadNote,
  LeadApplication to LeadStatusHistory,
  LeadApplication to LeadRevision,
  LeadOwner to LeadOwnerEmployment,
  LeadOwner to LeadOwnerIncome,
  LeadOwner to LeadOwnerAddress
}

// Note: One-to-many above already defines back-references; avoid duplicating ManyToOne to prevent property conflicts

// Removed to avoid conflict with Broker{leadApplications} to LeadApplication{broker}

paginate LeadApplication, LeadNote, LeadOwner, LeadOwnerEmployment, LeadOwnerIncome, LeadOwnerAddress, LeadAssetFinance, LeadMarketing, CommercialProfile with pagination
 
// Status change audit trail
entity LeadStatusHistory {
  status LeadStatus required,
  reason String maxlength(255),
  changedAt Instant required,
  changedBy String maxlength(100)
}

// Whole-lead snapshot for backup before changes
entity LeadRevision {
  snapshot TextBlob required,
  createdAt Instant required,
  createdBy String maxlength(100)
}

dto LeadStatusHistory, LeadRevision with mapstruct
paginate LeadStatusHistory, LeadRevision with pagination

// API audit logs for user actions through APIs
entity ApiAuditLog {
  action String required maxlength(100),
  httpMethod String required maxlength(10),
  endpoint String required maxlength(200),
  correlationId String maxlength(100),
  requestPayload TextBlob,
  responsePayload TextBlob,
  success Boolean,
  statusCode Integer,
  userId String maxlength(100),
  username String maxlength(100),
  ipAddress String maxlength(45),
  userAgent String maxlength(255),
  performedAt Instant required
}

dto ApiAuditLog with mapstruct
paginate ApiAuditLog with pagination

// Picklist entities (cached locally)

// Industries (supports parent children)
entity Industry {
  externalId Integer required unique,
  name String required maxlength(160)
}

// Loan Purposes
entity LoanPurpose {
  externalId Integer required unique,
  name String required maxlength(160)
}

// Loan Terms
entity LoanTerm {
  externalId Integer required unique,
  name String required maxlength(160)
}

// Owner Types
entity OwnerType {
  externalId Integer required unique,
  description String required maxlength(160)
}

// Home Owner Options
entity HomeOwnerOption {
  externalId Integer required unique,
  description String required maxlength(160)
}

// Product Types (supports parent children)
entity ProductType {
  externalId Integer required unique,
  name String required maxlength(160)
}

// Equipment Types
entity EquipmentType {
  externalId Integer required unique,
  description String required maxlength(160)
}

// Occupations
entity Occupation {
  externalId Integer required unique,
  occupation String required maxlength(200),
  isAu Boolean,
  isNz Boolean
}

// Employment Types
entity EmploymentType {
  name String required unique maxlength(100)
}

// Hierarchical relations for Industry and ProductType
relationship OneToMany {
  Industry{children} to Industry{parent},
  ProductType{children} to ProductType{parent}
}

dto Industry, LoanPurpose, LoanTerm, OwnerType, HomeOwnerOption, ProductType, EquipmentType, Occupation, EmploymentType with mapstruct
paginate Industry, LoanPurpose, LoanTerm, OwnerType, HomeOwnerOption, ProductType, EquipmentType, Occupation, EmploymentType with pagination
