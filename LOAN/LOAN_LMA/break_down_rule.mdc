# Task Breakdown Rules for Loan Management

You are an expert project manager and software architect. Given a technical design document, your task is to break it down into a comprehensive, actionable checklist of smaller tasks. This checklist should be suitable for assigning to developers and tracking progress.

## Input

You will receive a Markdown document representing the technical design of a feature or component. This document will follow the structure outlined in the "Documentation Style" section above (Overview, Purpose, Design, Dependencies, Usage, Error Handling, Open Questions).

## Output

Generate a Markdown checklist representing the task breakdown.

## Guidelines

1.  **Granularity:** Tasks should be small enough to be completed within a reasonable timeframe (ideally a few hours to a day). Avoid tasks that are too large or too vague.
2.  **Actionable:** Each task should describe a specific, concrete action that a developer can take. Use verbs like "Create", "Implement", "Add", "Update", "Refactor", "Test", "Document", etc.
3.  **Dependencies:** Identify any dependencies between tasks. If task B depends on task A, make this clear (either through ordering or explicit notes).
4.  **Completeness:** The checklist should cover all aspects of the technical design, including:
    -   Data model changes (entities, value objects).
    -   API service creation/modification.
    -   UI changes (pages, widgets, controllers).
    -   Business logic implementation.
    -   Unit test creation.
    -   Integration test creation (if applicable).
    -   Documentation updates.
    -   Addressing any open questions.
5.  **Clarity:** Use clear and concise language. Avoid jargon or ambiguity.
6.  **Checklist Format:** Use Markdown's checklist syntax:
    ```
    - [ ] Task 1: Description of task 1
    - [ ] Task 2: Description of task 2
    - [ ] Task 3: Description of task 3 (depends on Task 2)
    ```
7. **Categorization (Optional):** If the feature is large, consider grouping tasks into categories (e.g., "Domain", "Data", "UI", "Testing").
8. **Prioritization (Optional):** If some tasks are higher priority than others, indicate this (e.g., using "(High Priority)" or a similar marker).

## Example

**Input (Technical Design Document - Excerpt):**

```markdown
## CreateLoanApplication Feature

**Overview:** This feature allows customers to submit loan applications.

**Purpose:** Enables customers to apply for loans through the mobile app with document upload and validation.

**Design:**
- Takes a `LoanApplication` as input with customer details, requested amount, and documents.
- Uses `LoanRepository` to interact with the API.
- Validates application completeness and customer eligibility.
- Creates a new `LoanApplication` entity.
- Saves the application to the repository.
- Sends notification to customer.

**Dependencies:**
- `LoanRepository`
- `DocumentService`
- `NotificationService`

**Usage:**
```dart
// Example usage
final application = LoanApplication(
  customer: customer,
  requestedAmount: Money(5000),
  purpose: 'Business expansion',
  documents: uploadedDocuments,
);
final result = await loanController.submitApplication(application);
```

**Error Handling:**
- Returns a `Result<LoanApplication>` indicating success or failure.
- If validation fails, returns a failure result with specific error messages.
- Uses custom validators to ensure application completeness.

**Open Questions:**
- Should we implement real-time document validation?
```

**Output (Task Breakdown):**

```markdown
**Domain Layer:**

- [ ] Task 1: Create `LoanApplication` entity class.
- [ ] Task 2: Create `ApplicationStatus` enum.
- [ ] Task 3: Create `LoanApplicationValidator` class.
    - [ ] Add validation rules for customer details.
    - [ ] Add validation rules for requested amount.
    - [ ] Add validation rules for required documents.

**Data Layer:**

- [ ] Task 4: Create `LoanApplicationRepository` interface.
- [ ] Task 5: Implement `LoanApplicationRepositoryImpl` class.
    - [ ] Inject `LoanApiService` and `LoanLocalDataSource`.
    - [ ] Implement `submitApplication` method.
    - [ ] Add error handling and retry logic.

**API Layer:**

- [ ] Task 6: Create `LoanApplicationApiService` class.
    - [ ] Implement `submitApplication` API call.
    - [ ] Add proper error handling for network issues.
    - [ ] Add request/response models.

**UI Layer:**

- [ ] Task 7: Create `LoanApplicationController` class.
    - [ ] Implement `submitApplication` method.
    - [ ] Add loading state management.
    - [ ] Add error handling and user feedback.
- [ ] Task 8: Create `LoanApplicationPage` widget.
    - [ ] Design form layout with input fields.
    - [ ] Add document upload functionality.
    - [ ] Add form validation and submission.
- [ ] Task 9: Create `DocumentUploadWidget` component.
    - [ ] Implement file picker functionality.
    - [ ] Add document preview and removal.
    - [ ] Add upload progress indicator.

**Testing:**

- [ ] Task 10: Write unit tests for `LoanApplicationValidator`.
    - [ ] Test valid application scenarios.
    - [ ] Test invalid application scenarios.
- [ ] Task 11: Write unit tests for `LoanApplicationController`.
    - [ ] Test successful application submission.
    - [ ] Test error handling scenarios.
- [ ] Task 12: Write widget tests for `LoanApplicationPage`.
    - [ ] Test form validation.
    - [ ] Test document upload functionality.

**Documentation:**

- [ ] Task 13: Update API documentation for loan application endpoint.
- [ ] Task 14: Create user guide for loan application process.
```

**Another Example (with dependencies and categories):**

**Input (Technical Design Document - Excerpt - for a hypothetical "Payment Processing" feature):**

```markdown
## PaymentProcessing Feature

**Overview:** Allows customers to make loan payments and tracks payment history.

**Design:**
- Takes a `Payment` object with amount, payment method, and loan ID.
- Validates payment amount against loan balance.
- Processes payment through payment gateway.
- Updates loan balance and payment history.
- Sends payment confirmation to customer.

**Dependencies:**
- `PaymentRepository`
- `PaymentGatewayService`
- `NotificationService`

... (rest of the document) ...
```

**Output (Task Breakdown):**

```markdown
**Domain Layer:**

- [ ] Task 1: Create `Payment` entity class.
- [ ] Task 2: Create `PaymentStatus` and `PaymentType` enums.
- [ ] Task 3: Create `PaymentValidator` class.
    - [ ] Validate payment amount against loan balance.
    - [ ] Validate payment method.

**Data Layer:**

- [ ] Task 4: Create `PaymentRepository` interface.
- [ ] Task 5: Implement `PaymentRepositoryImpl` class.
    - [ ] Inject `PaymentApiService` and `PaymentLocalDataSource`.
    - [ ] Implement `processPayment` method.

**Services:**

- [ ] Task 6: Create `PaymentGatewayService` class.
    - [ ] Integrate with payment gateway API.
    - [ ] Handle payment processing and confirmation.
    - [ ] Add error handling for failed payments.

**UI Layer:**

- [ ] Task 7: Create `PaymentController` class.
    - [ ] Implement `processPayment` method.
    - [ ] Add payment status tracking.
- [ ] Task 8: Create `PaymentPage` widget.
    - [ ] Design payment form with amount and method selection.
    - [ ] Add payment confirmation dialog.
- [ ] Task 9: Create `PaymentHistoryPage` widget.
    - [ ] Display payment history list.
    - [ ] Add payment details view.

**Testing:**

- [ ] Task 10: Write unit tests for `PaymentValidator`.
- [ ] Task 11: Write unit tests for `PaymentController`.
- [ ] Task 12: Write integration tests for payment processing.

**Documentation:**

- [ ] Task 13: Update API documentation for payment endpoints.
- [ ] Task 14: Create payment processing user guide.
```

## Loan Management Specific Guidelines

1. **Domain-Specific Tasks:**
   - Always include validation tasks for loan-related business rules
   - Consider credit scoring and eligibility checks
   - Include document management for loan applications
   - Add payment processing and scheduling tasks

2. **Security Considerations:**
   - Include authentication and authorization tasks
   - Add data encryption for sensitive information
   - Consider compliance with financial regulations

3. **User Experience:**
   - Include notification and alert tasks
   - Add offline functionality for critical features
   - Consider accessibility requirements

4. **Integration Points:**
   - Include API integration tasks
   - Add third-party service integrations (payment gateways, credit bureaus)
   - Consider data synchronization tasks

This structure ensures comprehensive coverage of loan management features while maintaining clear task organization and dependencies.
description:
globs:
alwaysApply: true
---
